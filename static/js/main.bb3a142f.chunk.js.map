{"version":3,"sources":["components/Button.jsx","components/Input.jsx","components/ClearButton.jsx","App.js","serviceWorker.js","index.js"],"names":["Button","props","className","val","children","isNaN","onClick","handleClick","Input","input","ClearButton","handleClear","App","addToInput","state","length","setState","handleEqual","math","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8UAOaA,G,YAAS,SAAAC,GAAK,OACvB,yBAAKC,UAAS,0BALCC,EAMAF,EAAMG,SALbC,MAAMF,IAAgB,MAARA,GAAuB,MAARA,EAKG,WAAP,OAE7BG,QAAS,kBAAML,EAAMM,YAAYN,EAAMG,YAEtCH,EAAMG,UAVI,IAAAD,ICCNK,G,MAAQ,SAACP,GAAD,OACjB,yBAAKC,UAAU,SAASD,EAAMQ,SCFrBC,G,MAAc,SAACT,GAAD,OACvB,yBAAKC,UAAU,YAAYI,QAASL,EAAMU,aACrCV,EAAMG,Y,QCuEAQ,E,kDApEX,WAAYX,GAAQ,IAAD,8BACf,cAAMA,IAOVY,WAAa,SAAAV,GACG,MAARA,IAAaA,EAAM,KACnBE,MAAMF,IAAQE,MAAM,EAAKS,MAAML,MAAM,EAAKK,MAAML,MAAMM,OAAS,IAC/D,EAAKC,SAAS,CAAEP,MAAO,EAAKK,MAAML,QAGlC,EAAKO,SAAS,CAAEP,MAAO,EAAKK,MAAML,MAAQN,KAd/B,EAkBnBc,YAAc,WACNZ,MAAM,EAAKS,MAAML,MAAM,EAAKK,MAAML,MAAMM,OAAS,IACjD,EAAKC,SAAS,CAAEP,MAAO,EAAKK,MAAML,QAGlC,EAAKO,SAAS,CAAEP,MAAOS,IAAc,EAAKJ,MAAML,UApBpD,EAAKK,MAAQ,CACTL,MAAO,IAJI,E,qDA4BT,IAAD,OACL,OACI,yBAAKP,UAAU,OACX,yBAAKA,UAAU,gBACX,kBAAC,EAAD,CAAOO,MAAOU,KAAKL,MAAML,QACzB,yBAAKP,UAAU,OACX,kBAAC,EAAD,CAAQK,YAAaY,KAAKN,YAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaY,KAAKN,YAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaY,KAAKN,YAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaY,KAAKN,YAA1B,MAEJ,yBAAKX,UAAU,OACX,kBAAC,EAAD,CAAQK,YAAaY,KAAKN,YAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaY,KAAKN,YAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaY,KAAKN,YAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaY,KAAKN,YAA1B,MAEJ,yBAAKX,UAAU,OACX,kBAAC,EAAD,CAAQK,YAAaY,KAAKN,YAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaY,KAAKN,YAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaY,KAAKN,YAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaY,KAAKN,YAA1B,MAEJ,yBAAKX,UAAU,OACX,kBAAC,EAAD,CAAQK,YAAaY,KAAKN,YAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaY,KAAKN,YAA1B,KACA,kBAAC,EAAD,CAAQN,YAAa,kBAAM,EAAKU,gBAAhC,KACA,kBAAC,EAAD,CAAQV,YAAaY,KAAKN,YAA1B,MAEJ,yBAAKX,UAAU,OACX,kBAAC,EAAD,CAAaS,YAAa,kBAAM,EAAKK,SAAS,CAAEP,MAAO,OAAvD,gB,GA3DNW,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bb3a142f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Button.css';\r\n\r\nconst isOperator = val => {\r\n    return !isNaN(val) || val === \".\" || val === \"=\";\r\n}\r\n\r\nexport const Button = props => (\r\n    <div className={`button-wrapper ${\r\n        isOperator(props.children) ? null : \"operator\"\r\n        }`}\r\n        onClick={() => props.handleClick(props.children)}\r\n    >\r\n        {props.children}\r\n    </div>\r\n\r\n)\r\n\r\n\r\n","import React from 'react';\r\nimport './Input.css';\r\n\r\n\r\nexport const Input = (props) => (\r\n    <div className=\"input\">{props.input}</div>\r\n);","import React from 'react';\r\nimport './ClearButton.css';\r\n\r\nexport const ClearButton = (props) => (\r\n    <div className=\"clear-btn\" onClick={props.handleClear}>\r\n        {props.children}\r\n    </div>\r\n\r\n)","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Button } from './components/Button';\r\nimport { Input } from './components/Input';\r\nimport { ClearButton } from './components/ClearButton';\r\nimport * as math from 'mathjs';\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            input: \"\"\r\n        };\r\n    };\r\n\r\n    addToInput = val => {\r\n        if (val === 'X') val = \"*\";\r\n        if (isNaN(val) && isNaN(this.state.input[this.state.input.length - 1])) {\r\n            this.setState({ input: this.state.input });\r\n        }\r\n        else {\r\n            this.setState({ input: this.state.input + val });\r\n        }\r\n    };\r\n\r\n    handleEqual = () => {\r\n        if (isNaN(this.state.input[this.state.input.length - 1])) {\r\n            this.setState({ input: this.state.input });\r\n        }\r\n        else {\r\n            this.setState({ input: math.evaluate(this.state.input) });\r\n\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"app\" >\r\n                <div className=\"calc-wrapper\">\r\n                    <Input input={this.state.input} />\r\n                    <div className=\"row\">\r\n                        <Button handleClick={this.addToInput}>7</Button>\r\n                        <Button handleClick={this.addToInput}>8</Button>\r\n                        <Button handleClick={this.addToInput}>9</Button>\r\n                        <Button handleClick={this.addToInput}>/</Button>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <Button handleClick={this.addToInput}>4</Button>\r\n                        <Button handleClick={this.addToInput}>5</Button>\r\n                        <Button handleClick={this.addToInput}>6</Button>\r\n                        <Button handleClick={this.addToInput}>X</Button>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <Button handleClick={this.addToInput}>1</Button>\r\n                        <Button handleClick={this.addToInput}>2</Button>\r\n                        <Button handleClick={this.addToInput}>3</Button>\r\n                        <Button handleClick={this.addToInput}>+</Button>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <Button handleClick={this.addToInput}>.</Button>\r\n                        <Button handleClick={this.addToInput}>0</Button>\r\n                        <Button handleClick={() => this.handleEqual()}>=</Button>\r\n                        <Button handleClick={this.addToInput}>-</Button>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <ClearButton handleClear={() => this.setState({ input: \"\" })}>Clear</ClearButton>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}